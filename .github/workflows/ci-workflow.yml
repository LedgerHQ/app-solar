name: Compilation & tests

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
      - develop

jobs:
  prepare:
    name: Prepare commit hash
    runs-on: ubuntu-latest
    steps:
      - name: Parse short sha
        uses: benjlevesque/short-sha@v1.2
        id: short-sha
        with:
          length: 7
    outputs:
      sha7: ${{ steps.short-sha.outputs.sha }}

  job_nanos_build:
    name: Build for the Nano S
    runs-on: ubuntu-latest
    needs: prepare

    container:
      image: ghcr.io/ledgerhq/ledger-app-builder/ledger-app-builder:latest

    steps:
      - name: Clone
        uses: actions/checkout@v3

      - name: Build
        run: |
          make

      - name: Upload app binary
        uses: actions/upload-artifact@v3
        with:
          name: app-solar-nanos-${{ needs.prepare.outputs.sha7 }}
          path: bin/nanos

  job_nanox_build:
    name: Build for the Nano X
    runs-on: ubuntu-latest
    needs: prepare

    container:
      image: ghcr.io/ledgerhq/ledger-app-builder/ledger-app-builder:latest

    steps:
      - name: Clone
        uses: actions/checkout@v3

      - name: Build
        run: |
          make BOLOS_SDK=$NANOX_SDK

      - name: Upload app binary
        uses: actions/upload-artifact@v3
        with:
          name: app-solar-nanox-${{ needs.prepare.outputs.sha7 }}
          path: bin/nanox

  job_nanosp_build:
    name: Build for the Nano S Plus
    runs-on: ubuntu-latest
    needs: prepare

    container:
      image: ghcr.io/ledgerhq/ledger-app-builder/ledger-app-builder:latest

    steps:
      - name: Clone
        uses: actions/checkout@v3

      - name: Build
        run: |
          make BOLOS_SDK=$NANOSP_SDK

      - name: Upload app binary
        uses: actions/upload-artifact@v3
        with:
          name: app-solar-nanosp-${{ needs.prepare.outputs.sha7 }}
          path: bin/nanosp

  job_scan_build:
    name: Clang Static Analyser
    runs-on: ubuntu-latest
    needs: job_nanos_build

    container:
      image: ghcr.io/ledgerhq/ledger-app-builder/ledger-app-builder:latest

    steps:
      - uses: actions/checkout@v3

      - name: Build with Clang Static Analyser
        run: |
          make clean
          scan-build --use-cc=clang -analyze-headers -enable-checker security -enable-checker unix -enable-checker valist -o scan-build --status-bugs make default
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: scan-build
          path: scan-build

  job_unit_test:
    name: Unit test
    runs-on: ubuntu-latest

    container:
      image: ghcr.io/ledgerhq/ledger-app-builder/ledger-app-builder:latest

    steps:
      - name: Clone
        uses: actions/checkout@v3

      - name: Build unit tests
        run: |
          cd tests/unit-tests/
          cmake -Bbuild -H. && make -C build && make -C build test

      - name: Generate code coverage
        run: |
          cd tests/unit-tests/
          lcov --directory . -b "$(realpath build/)" --capture --initial -o coverage.base && \
          lcov --rc lcov_branch_coverage=1 --directory . -b "$(realpath build/)" --capture -o coverage.capture && \
          lcov --directory . -b "$(realpath build/)" --add-tracefile coverage.base --add-tracefile coverage.capture -o coverage.info && \
          lcov --directory . -b "$(realpath build/)" --remove coverage.info '*/unit-tests/*' -o coverage.info && \
          genhtml coverage.info -o coverage

      - uses: actions/upload-artifact@v3
        with:
          name: code-coverage
          path: tests/unit-tests/coverage

      - name: Upload to codecov.io
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./tests/unit-tests/coverage.info
          flags: unittests
          name: codecov-app-solar
          fail_ci_if_error: true
          verbose: true

  job_generate_doc:
    name: Generate project documentation
    runs-on: ubuntu-latest
    needs: prepare

    container:
      image: ghcr.io/ledgerhq/ledger-app-builder/ledger-app-builder:latest

    steps:
      - name: Clone
        uses: actions/checkout@v3

      - name: HTML documentation
        run: doxygen .doxygen/Doxyfile

      - uses: actions/upload-artifact@v3
        with:
          name: app-solar-docs-${{ needs.prepare.outputs.sha7 }}
          path: doc/html

  job_functional:
    name: Functional tests using Speculos
    runs-on: ubuntu-latest
    needs: [prepare, job_nanos_build]

    steps:
      - name: Clone
        uses: actions/checkout@v3

      - name: Download app binary
        uses: actions/download-artifact@v3
        with:
          name: app-solar-nanos-${{ needs.prepare.outputs.sha7 }}
          path: bin/nanos

      - name: Install tests dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y qemu-user-static
          pip install --extra-index-url https://test.pypi.org/simple/ -r tests/functional/requirements.txt

      - name: Run test
        env:
          CTEST_OUTPUT_ON_FAILURE: 1
        run: pytest tests/functional/ --headless
